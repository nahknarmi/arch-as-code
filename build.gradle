import static org.gradle.api.JavaVersion.VERSION_11

plugins {
    id "java"
    id "application"
    id "jacoco"
    id "com.github.ben-manes.versions" version "0.29.0"
    // See: https://gradle-pitest-plugin.solidsoft.info/
    id "info.solidsoft.pitest" version "1.5.2"
    // See https://www.baeldung.com/lombok-ide for how to configure intellij to work with lombok
    id "io.freefair.lombok" version "5.1.1"
    id "com.gorylenko.gradle-git-properties" version "2.2.3"
    id "org.springframework.boot" version "2.3.3.RELEASE"
    // Magic monkey patching of logging dependencies, checking for problems
    // See: https://blog.gradle.org/addressing-logging-complexity-capabilities
    id "dev.jacomet.logging-capabilities" version "0.9.0"
}

mainClassName = "net.trilogy.arch.Application"
group = "net.trilogy.arch"
version = "0.1.6"

repositories {
    mavenCentral()
    jcenter()
    maven {
        // JIRA uses non-central repositories
        url "https://packages.atlassian.com/public"
    }
}

dependencies {
    //Spotbugs suppress annotations
    implementation "com.github.spotbugs:spotbugs:4.1.2"

    //Google
    implementation "com.google.apis:google-api-services-docs:v1-rev46-1.25.0"
    implementation "com.google.api-client:google-api-client:1.30.10"
    implementation "com.google.oauth-client:google-oauth-client-jetty:1.31.0"

    //Guava
    implementation "com.google.guava:guava:29.0-jre"

    //Structurizr
    implementation "com.structurizr:structurizr-client:1.5.0"
    // TODO: Why is Gson required if we're using Jackson?
    implementation "com.google.code.gson:gson:2.8.6"

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation "org.eclipse.jgit:org.eclipse.jgit:5.8.1.202007141445-r"

    implementation "guru.nidi:graphviz-java-all-j2v8:0.17.0"

    //Command line arguments
    implementation "info.picocli:picocli:4.5.1"
    annotationProcessor "info.picocli:picocli-codegen:4.5.1"

    //vavr
    implementation "io.vavr:vavr:0.10.2"

    //yaml and json
    implementation "com.networknt:json-schema-validator:1.0.43"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.10.2"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.2"
    implementation "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.10.2"

    //json
    implementation "org.json:json:20200518"

    //logging -- TODO: SLF4J
    implementation "org.apache.logging.log4j:log4j-api:2.13.3"
    implementation "org.apache.logging.log4j:log4j-core:2.13.3"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.13.3"
    implementation "org.slf4j:slf4j-api:1.7.30"

    //jira
    implementation "com.atlassian.jira:jira-rest-java-client-core:5.2.1"
    implementation "io.atlassian.fugue:fugue:4.7.2" // Beware com.atlassian

    //Testing
    //Makesure hamcrest is above junit see - https://stackoverflow.com/questions/7869711/getting-nosuchmethoderror-org-hamcrest-matcher-describemismatch-when-running
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "junit:junit:4.13"
    testImplementation "commons-io:commons-io:2.7"
    testImplementation "org.mockito:mockito-inline:3.5.11"
    testImplementation "pl.pragmatists:JUnitParams:1.1.1"
    testImplementation "com.github.stefanbirkner:system-rules:1.19.0"
}

loggingCapabilities {
    enforceLog4J2() // TODO: SLF4J
}

java {
    sourceCompatibility = VERSION_11
    targetCompatibility = VERSION_11
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        !isStable(it.candidate.version)
    }
}

lombok {
    generateLombokConfig.enabled = false
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all,-serial" << "-Werror"
    options.encoding = "UTF-8"
}

test {
    finalizedBy jacocoTestReport // Provide coverage report ASAP
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit { minimum = 0.91 }
        }
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled = true
        // Use standard location for HTML coverage results
        html.enabled = true
        csv.enabled = false
    }
}

check {
    dependsOn jacocoTestCoverageVerification
    // dependsOn "pitest" -- CI does this; it runs too long for local builds
}

pitest {
    coverageThreshold.set(95)
    mutationThreshold.set(85)
    targetClasses.set(["net.trilogy.*"])
    timestampedReports.set(true)
    verbose.set(true)
}

project.test {
    testLogging {
        exceptionFormat = "FULL"
        showCauses = true
        showExceptions = true
        showStackTraces = true
        // TODO: A smell from noisy methods. Better is that tests capture
        //       STDOUT and/or STDERR, asserting we print the right things
        showStandardStreams = false
    }
}

bootJar {
    mainClassName = "net.trilogy.arch.Application"
}

def isStable = { String version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it ->
        version.toUpperCase().contains(it)
    }
    def regex = /^[0-9,.v-]+(-r)?$/

    return stableKeyword || version ==~ regex
}
